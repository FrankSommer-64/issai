# -*- coding: utf-8 -*-

# -----------------------------------------------------------------------------------------------
# issai - Framework to run tests specified in Kiwi Test Case Management System
#
# Copyright (c) 2024, Frank Sommer.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------------------------

"""
Unit tests for cli.common.
The tests will only succeed, if the following preconditions are fulfilled:
- Environment variable TEST_DATA_ROOT holds the name of the directory containing the test data files
- TCMS test server must be running with the appropriate test data set (cli_test.toml)
- ~/.tcms.conf contains URL and login for the TCMS test server
"""
import unittest

from issai.cli.common import *
from tests.cli import test_file_path, test_runs_in_multi_build_dataset, test_runs_in_multi_version_dataset


DEFAULT_BUILD = 'unspecified'
DEFAULT_BUILD_ID = '201'
DEFAULT_CASE = 'DefaultCase'
DEFAULT_CASE_ID = '601'
DEFAULT_ENV = 'IssaiUnitTestAll'
DEFAULT_ENV_ID = '1'
DEFAULT_FN = 'testplan_1.toml'
DEFAULT_PATH = '/tmp'
DEFAULT_PLAN = 'DefaultPlan'
DEFAULT_PLAN_ID = '401'
DEFAULT_PRODUCT = 'IssaiMvMb'
DEFAULT_PRODUCT_ID = '1'
DEFAULT_VERSION = 'unspecified'
DEFAULT_VERSION_ID = '101'
DUP_PLAN = 'FullyAmbiguousPlan'
DUP_PLAN_ID_101 = '3491'
DUP_PLAN_ID_DEFAULT_PROD = '2'
DUP_PLAN_ID_UNIQUE_VER = '491'
DUP_PRODUCT = 'IssaiMvSb'
DUP_PRODUCT_ID = '1001'
FILE_BUILD_ID = '1'
FILE_PLAN_ID = '1'
FILE_PRODUCT = 'Dummy'
FILE_PRODUCT_ID = '1'
FILE_VERSION_ID = '1'
FULLY_AMBIGUOUS_PLAN = 'FullyAmbiguousPlan'
FULLY_AMBIGUOUS_PLAN_SV_SB_ID = '3491'
SIMPLE_PLAN_FN = 'testplan_1.toml'
MULTI_VERSION_PLAN_FN = 'multi_version_testplan_1.toml'
MULTI_BUILD_PLAN_FN = 'multi_build_testplan_1.toml'
MV_MB_DEFAULT_BUILD_ID = '202'
MV_MB_VERSION = 'mb_version'
MV_MB_VERSION_ID = '102'
MV_MB_PLAN = 'MvMbPlan'
MV_MB_PLAN_ID = '403'
MV_MB_PRODUCT = 'IssaiMvMb'
MV_MB_PRODUCT_ID = '1'
MV_SB_DEFAULT_BUILD_ID = '1202'
MV_SB_VERSION = 'sb_version'
MV_SB_VERSION_ID = '1102'
MV_SB_PLAN = 'MvSbPlan'
MV_SB_PLAN_ID = '1402'
MV_SB_PRODUCT = 'IssaiMvSb'
MV_SB_PRODUCT_ID = '1001'
NEW_BUILD = 'newbuild'
NON_EXISTING_BUILD = 'non-existing'
NON_EXISTING_FILE = 'non_existing_file.toml'
NON_EXISTING_PLAN = 'non-existing'
NON_EXISTING_PLAN_ID = '999999'
NON_EXISTING_VERSION = 'non-existing'
SV_MB_DEFAULT_BUILD_ID = '2201'
SV_MB_VERSION_ID = '2101'
SV_MB_PLAN = 'SvMbPlan'
SV_MB_PLAN_ID = '2401'
SV_MB_PRODUCT = 'IssaiSvMb'
SV_MB_PRODUCT_ID = '2001'
SV_SB_BUILD_ID = '3201'
SV_SB_PLAN = 'SvSbPlan'
SV_SB_PLAN_ID = '3401'
SV_SB_PRODUCT = 'IssaiSvSb'
SV_SB_PRODUCT_ID = '3001'
SV_SB_VERSION_ID = '3101'
UNIQUE_BUILD = 'unique_build'
UNIQUE_BUILD_ID = '3201'
UNIQUE_VERSION = 'unique_version'
UNIQUE_VERSION_ID = '3101'
VER_AMBIGUOUS_PLAN = 'VersionAmbiguousPlan'
VER_UNIQUE_PLAN = 'VersionUniquePlan'
VER_UNIQUE_PLAN_ID = '1401'


# command line arguments
EXP_ARGS_CASE_MAX = [f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_ENVIRONMENTS}',
                     f'--{CLI_ARG_INCLUDE_EXECUTIONS}', f'--{CLI_ARG_INCLUDE_HISTORY}',
                     f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                     f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION,
                     CLI_ARG_VAL_CASE, DEFAULT_CASE, DEFAULT_PATH]
EXP_ARGS_CASE_MIN = [CLI_ARG_VAL_CASE, DEFAULT_CASE, DEFAULT_PATH]
EXP_ARGS_CASE_ID_MAX = [f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_EXECUTIONS}',
                        f'--{CLI_ARG_INCLUDE_HISTORY}', f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                        f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION,
                        CLI_ARG_VAL_CASE_ID, DEFAULT_CASE_ID, DEFAULT_PATH]
EXP_ARGS_CASE_ID_MIN = [CLI_ARG_VAL_CASE_ID, DEFAULT_CASE_ID, DEFAULT_PATH]
EXP_ARGS_PLAN_MAX = [f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_DESCENDANTS}',
                     f'--{CLI_ARG_INCLUDE_ENVIRONMENTS}', f'--{CLI_ARG_INCLUDE_HISTORY}', f'--{CLI_ARG_INCLUDE_RUNS}',
                     f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                     f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION,
                     CLI_ARG_VAL_PLAN, DEFAULT_PLAN, DEFAULT_PATH]
EXP_ARGS_PLAN_MIN = [CLI_ARG_VAL_PLAN, DEFAULT_PLAN, DEFAULT_PATH]
EXP_ARGS_DUP_PROD_PLAN = [CLI_ARG_VAL_PLAN, FULLY_AMBIGUOUS_PLAN, DEFAULT_PATH, f'--{CLI_ARG_PRODUCT}', SV_SB_PRODUCT]
EXP_ARGS_DUP_PROD_VER_PLAN = [CLI_ARG_VAL_PLAN, DUP_PLAN, DEFAULT_PATH, f'--{CLI_ARG_PRODUCT}', DEFAULT_PRODUCT,
                              f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION]
EXP_ARGS_PLAN_ID_MAX = [f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_DESCENDANTS}',
                        f'--{CLI_ARG_INCLUDE_HISTORY}', f'--{CLI_ARG_INCLUDE_RUNS}',
                        f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                        f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION,
                        CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID, DEFAULT_PATH]
EXP_ARGS_PLAN_ID_MIN = [CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID, DEFAULT_PATH]
EXP_ARGS_PROD_MAX = [f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_ENVIRONMENTS}',
                     f'--{CLI_ARG_INCLUDE_HISTORY}', f'--{CLI_ARG_INCLUDE_RUNS}',
                     f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD, f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION,
                     CLI_ARG_VAL_PRODUCT, DEFAULT_PRODUCT, DEFAULT_PATH]
EXP_ARGS_PROD_MIN = [CLI_ARG_VAL_PRODUCT, DEFAULT_PRODUCT, DEFAULT_PATH]
EXP_ARGS_PROD_ID_MAX = [f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_HISTORY}', f'--{CLI_ARG_INCLUDE_RUNS}',
                        f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD, f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION,
                        CLI_ARG_VAL_PRODUCT_ID, DEFAULT_PRODUCT_ID, DEFAULT_PATH]
EXP_ARGS_PROD_ID_MIN = [CLI_ARG_VAL_PRODUCT_ID, DEFAULT_PRODUCT_ID, DEFAULT_PATH]
# failures
EXP_ARGS_NO_ARGS = []
EXP_ARGS_DUP_PLAN_NO_PRODUCT = [CLI_ARG_VAL_PLAN, DUP_PLAN, DEFAULT_PATH]
EXP_ARGS_DUP_PROD_PLAN_NO_VERSION = [CLI_ARG_VAL_PLAN, DUP_PLAN, DEFAULT_PATH, f'--{CLI_ARG_PRODUCT}', DUP_PRODUCT]
EXP_ARGS_DUP_VERSION_PLAN = [CLI_ARG_VAL_PLAN, DUP_PLAN, DEFAULT_PATH, f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION]
EXP_ARGS_INV_ENTITY_SPEC = ['xyz', DEFAULT_PRODUCT, DEFAULT_PATH]
EXP_ARGS_INV_OPTION = ['--xyz', CLI_ARG_VAL_PLAN, DEFAULT_PLAN, DEFAULT_PATH]
EXP_ARGS_NO_ENTITY = [CLI_ARG_VAL_CASE_ID]
EXP_ARGS_NO_OUTPUT_PATH = [CLI_ARG_VAL_CASE, DEFAULT_CASE]
IMP_ARGS_MIN = [DEFAULT_FN]
IMP_ARGS_MAX = [f'--{CLI_ARG_APPLY_CURRENT_USER}', CLI_ARG_VAL_APPLY_USER_ALWAYS, f'--{CLI_ARG_CREATE_MASTER_DATA}',
                f'--{CLI_ARG_DRY_RUN}', f'--{CLI_ARG_INCLUDE_ATTACHMENTS}', f'--{CLI_ARG_INCLUDE_ENVIRONMENTS}',
                DEFAULT_FN]
IMP_ARGS_NO_FILE_NAME = []
IMP_ARGS_NON_EXISTING_FILE = [NON_EXISTING_FILE]
IMP_ARGS_INV_OPTION = ['--xyz', DEFAULT_FN]
IMP_ARGS_INV_ACU_VALUE = [f'--{CLI_ARG_APPLY_CURRENT_USER}', 'xyz', DEFAULT_FN]
RUN_ARGS_FILE_MAX = [f'--{CLI_ARG_DRY_RUN}', f'--{CLI_ARG_ENVIRONMENT}', DEFAULT_ENV, f'--{CLI_ARG_INCLUDE_DESCENDANTS}',
                     f'--{CLI_ARG_PRODUCT}', FILE_PRODUCT, f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                     f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION, f'--{CLI_ARG_STORE_RESULT}',
                     CLI_ARG_VAL_INPUT_FILE, DEFAULT_FN]
RUN_ARGS_FILE_MIN = [CLI_ARG_VAL_INPUT_FILE, DEFAULT_FN]
RUN_ARGS_ID_SB = [CLI_ARG_VAL_PLAN_ID, SV_SB_PLAN_ID]
RUN_ARGS_ID_MB = [f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD, CLI_ARG_VAL_PLAN_ID, SV_MB_PLAN_ID]
RUN_ARGS_ID_MB_NEW_BUILD = [f'--{CLI_ARG_PRODUCT_BUILD}', NEW_BUILD, CLI_ARG_VAL_PLAN_ID, SV_MB_PLAN_ID]
RUN_ARGS_ID_BUILD_MISSING = [CLI_ARG_VAL_PLAN_ID, SV_MB_PLAN_ID]
RUN_ARGS_ID_MAX = [f'--{CLI_ARG_DRY_RUN}', f'--{CLI_ARG_ENVIRONMENT}', DEFAULT_ENV, f'--{CLI_ARG_INCLUDE_DESCENDANTS}',
                   f'--{CLI_ARG_PRODUCT}', DEFAULT_PRODUCT, f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                   f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION, f'--{CLI_ARG_STORE_RESULT}',
                   CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID]
RUN_ARGS_ID_MIN = [CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID]
RUN_ARGS_NAME_MAX = [f'--{CLI_ARG_DRY_RUN}', f'--{CLI_ARG_ENVIRONMENT}', DEFAULT_ENV, f'--{CLI_ARG_INCLUDE_DESCENDANTS}',
                     f'--{CLI_ARG_PRODUCT}', DEFAULT_PRODUCT, f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                     f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION, f'--{CLI_ARG_STORE_RESULT}',
                     CLI_ARG_VAL_PLAN, DEFAULT_PLAN]
RUN_ARGS_NAME_MIN = [CLI_ARG_VAL_PLAN, DEFAULT_PLAN]
RUN_ARGS_NAME_AMBIGUOUS_PROD = [f'--{CLI_ARG_PRODUCT}', SV_SB_PRODUCT, CLI_ARG_VAL_PLAN, FULLY_AMBIGUOUS_PLAN]
RUN_ARGS_NAME_MV_MB = [f'--{CLI_ARG_DRY_RUN}', f'--{CLI_ARG_ENVIRONMENT}', DEFAULT_ENV,
                       f'--{CLI_ARG_INCLUDE_DESCENDANTS}', f'--{CLI_ARG_PRODUCT}', MV_MB_PRODUCT,
                       f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD,
                       f'--{CLI_ARG_PRODUCT_VERSION}', MV_MB_VERSION, f'--{CLI_ARG_STORE_RESULT}',
                       CLI_ARG_VAL_PLAN, MV_MB_PLAN]
RUN_ARGS_NAME_MV_SB = [f'--{CLI_ARG_PRODUCT_VERSION}', MV_SB_VERSION, CLI_ARG_VAL_PLAN, MV_SB_PLAN]
RUN_ARGS_NAME_SV_MB = [f'--{CLI_ARG_PRODUCT_BUILD}', DEFAULT_BUILD, CLI_ARG_VAL_PLAN, SV_MB_PLAN]
RUN_ARGS_NAME_SV_MB_NEW_BUILD = [f'--{CLI_ARG_PRODUCT_BUILD}', NEW_BUILD, CLI_ARG_VAL_PLAN, SV_MB_PLAN]
RUN_ARGS_NAME_SV_SB = [CLI_ARG_VAL_PLAN, SV_SB_PLAN]
RUN_ARGS_NAME_VER_UNIQUE = [CLI_ARG_VAL_PLAN, VER_UNIQUE_PLAN]
RUN_ARGS_NO_ARGS = []
RUN_ARGS_INV_ENTITY_SPEC = ['product', DEFAULT_PRODUCT]
RUN_ARGS_INV_OPTION = ['--xyz', CLI_ARG_VAL_PLAN, DEFAULT_PLAN]
RUN_ARGS_NO_FILE = [CLI_ARG_VAL_INPUT_FILE]
RUN_ARGS_NO_ID = [CLI_ARG_VAL_PLAN_ID]
RUN_ARGS_NO_NAME = [CLI_ARG_VAL_PLAN]
RUN_ARGS_ID_MISSING_BUILD = [CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID, f'--{CLI_ARG_PRODUCT_VERSION}', DEFAULT_VERSION]
RUN_ARGS_ID_NON_EXISTING_BUILD = [CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID, f'--{CLI_ARG_PRODUCT_BUILD}', NON_EXISTING_BUILD]
RUN_ARGS_ID_NON_EXISTING_ID = [CLI_ARG_VAL_PLAN_ID, NON_EXISTING_PLAN_ID]
RUN_ARGS_ID_NON_EXISTING_VERSION = [CLI_ARG_VAL_PLAN_ID, DEFAULT_PLAN_ID,
                                    f'--{CLI_ARG_PRODUCT_VERSION}', NON_EXISTING_VERSION]
RUN_ARGS_NAME_MISSING_BUILD = [CLI_ARG_VAL_PLAN, SV_MB_PLAN]
RUN_ARGS_NAME_MISSING_PROD = [CLI_ARG_VAL_PLAN, FULLY_AMBIGUOUS_PLAN]
RUN_ARGS_NAME_MISSING_VERSION = [CLI_ARG_VAL_PLAN, MV_SB_PLAN]
RUN_ARGS_NAME_NON_EXISTING_BUILD = [CLI_ARG_VAL_PLAN, DEFAULT_PLAN, f'--{CLI_ARG_PRODUCT_BUILD}', NON_EXISTING_BUILD]
RUN_ARGS_NAME_NON_EXISTING_NAME = [CLI_ARG_VAL_PLAN, NON_EXISTING_PLAN]
RUN_ARGS_NAME_NON_EXISTING_VERSION = [CLI_ARG_VAL_PLAN, DEFAULT_PLAN,
                                      f'--{CLI_ARG_PRODUCT_VERSION}', NON_EXISTING_VERSION]

# expected footprint for parsed command line arguments
FP_EXP_ARGS_CASE_MAX = {CLI_ARG_ENTITY_REF: DEFAULT_CASE, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_CASE,
                        CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INCLUDE_DESCENDANTS: False,
                        CLI_ARG_INCLUDE_EXECUTIONS: True, CLI_ARG_INCLUDE_HISTORY: True, CLI_ARG_INCLUDE_RUNS: False,
                        CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                        CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION}
FP_EXP_ARGS_CASE_MIN = {CLI_ARG_ENTITY_REF: DEFAULT_CASE, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_CASE,
                        CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INCLUDE_DESCENDANTS: False,
                        CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: False, CLI_ARG_INCLUDE_RUNS: False,
                        CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                        CLI_ARG_PRODUCT_BUILD: None, CLI_ARG_PRODUCT_VERSION: None}
FP_EXP_ARGS_CASE_ID_MAX = {CLI_ARG_ENTITY_REF: DEFAULT_CASE_ID, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_CASE_ID,
                           CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INCLUDE_DESCENDANTS: False,
                           CLI_ARG_INCLUDE_EXECUTIONS: True, CLI_ARG_INCLUDE_HISTORY: True, CLI_ARG_INCLUDE_RUNS: False,
                           CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                           CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION}
FP_EXP_ARGS_CASE_ID_MIN = {CLI_ARG_ENTITY_REF: DEFAULT_CASE_ID, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_CASE_ID,
                           CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INCLUDE_DESCENDANTS: False,
                           CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: False,
                           CLI_ARG_INCLUDE_RUNS: False, CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                           CLI_ARG_PRODUCT_BUILD: None, CLI_ARG_PRODUCT_VERSION: None}
FP_EXP_ARGS_PLAN_MAX = {CLI_ARG_ENTITY_REF: DEFAULT_PLAN, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PLAN,
                        CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INCLUDE_DESCENDANTS: True,
                        CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: True, CLI_ARG_INCLUDE_RUNS: True,
                        CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                        CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION}
FP_EXP_ARGS_PLAN_MIN = {CLI_ARG_ENTITY_REF: DEFAULT_PLAN, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PLAN,
                        CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INCLUDE_DESCENDANTS: False,
                        CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: False, CLI_ARG_INCLUDE_RUNS: False,
                        CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                        CLI_ARG_PRODUCT_BUILD: None, CLI_ARG_PRODUCT_VERSION: None}
FP_EXP_ARGS_PLAN_ID_MAX = {CLI_ARG_ENTITY_REF: DEFAULT_PLAN_ID, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PLAN_ID,
                           CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INCLUDE_DESCENDANTS: True,
                           CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: True, CLI_ARG_INCLUDE_RUNS: True,
                           CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                           CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION}
FP_EXP_ARGS_PLAN_ID_MIN = {CLI_ARG_ENTITY_REF: DEFAULT_PLAN_ID, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PLAN_ID,
                           CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INCLUDE_DESCENDANTS: False,
                           CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: False,
                           CLI_ARG_INCLUDE_RUNS: False, CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                           CLI_ARG_PRODUCT_BUILD: None, CLI_ARG_PRODUCT_VERSION: None}
FP_EXP_ARGS_PROD_MAX = {CLI_ARG_ENTITY_REF: DEFAULT_PRODUCT, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PRODUCT,
                        CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INCLUDE_DESCENDANTS: False,
                        CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: True, CLI_ARG_INCLUDE_RUNS: True,
                        CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                        CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION}
FP_EXP_ARGS_PROD_MIN = {CLI_ARG_ENTITY_REF: DEFAULT_PRODUCT, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PRODUCT,
                        CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INCLUDE_DESCENDANTS: False,
                        CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: False, CLI_ARG_INCLUDE_RUNS: False,
                        CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                        CLI_ARG_PRODUCT_BUILD: None, CLI_ARG_PRODUCT_VERSION: None}
FP_EXP_ARGS_PROD_ID_MAX = {CLI_ARG_ENTITY_REF: DEFAULT_PRODUCT_ID, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PRODUCT_ID,
                           CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INCLUDE_DESCENDANTS: False,
                           CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: True, CLI_ARG_INCLUDE_RUNS: True,
                           CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                           CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION}
FP_EXP_ARGS_PROD_ID_MIN = {CLI_ARG_ENTITY_REF: DEFAULT_PRODUCT_ID, CLI_ARG_EXPORT_ENTITY_SPEC: CLI_ARG_VAL_PRODUCT_ID,
                           CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INCLUDE_DESCENDANTS: False,
                           CLI_ARG_INCLUDE_EXECUTIONS: False, CLI_ARG_INCLUDE_HISTORY: False,
                           CLI_ARG_INCLUDE_RUNS: False, CLI_ARG_OUTPUT_PATH: DEFAULT_PATH,
                           CLI_ARG_PRODUCT_BUILD: None, CLI_ARG_PRODUCT_VERSION: None}
FP_IMP_ARGS_MIN = {CLI_ARG_APPLY_CURRENT_USER: CLI_ARG_VAL_APPLY_USER_NEVER, CLI_ARG_CREATE_MASTER_DATA: False,
                   CLI_ARG_DRY_RUN: False, CLI_ARG_INCLUDE_ATTACHMENTS: False, CLI_ARG_INPUT_FILE: DEFAULT_FN}
FP_IMP_ARGS_MAX = {CLI_ARG_APPLY_CURRENT_USER: CLI_ARG_VAL_APPLY_USER_ALWAYS, CLI_ARG_CREATE_MASTER_DATA: True,
                   CLI_ARG_DRY_RUN: True, CLI_ARG_INCLUDE_ATTACHMENTS: True, CLI_ARG_INPUT_FILE: DEFAULT_FN}
FP_RUN_ARGS_FILE_MAX = {CLI_ARG_DRY_RUN: True, CLI_ARG_ENTITY_REF: DEFAULT_FN, CLI_ARG_ENVIRONMENT: DEFAULT_ENV,
                        CLI_ARG_INCLUDE_DESCENDANTS: True, CLI_ARG_PRODUCT: FILE_PRODUCT,
                        CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION,
                        CLI_ARG_RUN_ENTITY_SPEC: CLI_ARG_VAL_INPUT_FILE, CLI_ARG_STORE_RESULT: True}
FP_RUN_ARGS_FILE_MIN = {CLI_ARG_DRY_RUN: False, CLI_ARG_ENTITY_REF: DEFAULT_FN, CLI_ARG_ENVIRONMENT: None,
                        CLI_ARG_INCLUDE_DESCENDANTS: False, CLI_ARG_PRODUCT: None, CLI_ARG_PRODUCT_BUILD: None,
                        CLI_ARG_PRODUCT_VERSION: None, CLI_ARG_RUN_ENTITY_SPEC: CLI_ARG_VAL_INPUT_FILE,
                        CLI_ARG_STORE_RESULT: False}
FP_RUN_ARGS_ID_MAX = {CLI_ARG_DRY_RUN: True, CLI_ARG_ENTITY_REF: DEFAULT_PLAN_ID, CLI_ARG_ENVIRONMENT: DEFAULT_ENV,
                      CLI_ARG_INCLUDE_DESCENDANTS: True, CLI_ARG_PRODUCT: DEFAULT_PRODUCT,
                      CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION,
                      CLI_ARG_RUN_ENTITY_SPEC: CLI_ARG_VAL_PLAN_ID, CLI_ARG_STORE_RESULT: True}
FP_RUN_ARGS_ID_MIN = {CLI_ARG_DRY_RUN: False, CLI_ARG_ENTITY_REF: DEFAULT_PLAN_ID, CLI_ARG_ENVIRONMENT: None,
                      CLI_ARG_INCLUDE_DESCENDANTS: False, CLI_ARG_PRODUCT: None, CLI_ARG_PRODUCT_BUILD: None,
                      CLI_ARG_PRODUCT_VERSION: None, CLI_ARG_RUN_ENTITY_SPEC: CLI_ARG_VAL_PLAN_ID,
                      CLI_ARG_STORE_RESULT: False}
FP_RUN_ARGS_NAME_MAX = {CLI_ARG_DRY_RUN: True, CLI_ARG_ENTITY_REF: DEFAULT_PLAN, CLI_ARG_ENVIRONMENT: DEFAULT_ENV,
                        CLI_ARG_INCLUDE_DESCENDANTS: True, CLI_ARG_PRODUCT: DEFAULT_PRODUCT,
                        CLI_ARG_PRODUCT_BUILD: DEFAULT_BUILD, CLI_ARG_PRODUCT_VERSION: DEFAULT_VERSION,
                        CLI_ARG_RUN_ENTITY_SPEC: CLI_ARG_VAL_PLAN, CLI_ARG_STORE_RESULT: True}
FP_RUN_ARGS_NAME_MIN = {CLI_ARG_DRY_RUN: False, CLI_ARG_ENTITY_REF: DEFAULT_PLAN, CLI_ARG_ENVIRONMENT: None,
                        CLI_ARG_INCLUDE_DESCENDANTS: False, CLI_ARG_PRODUCT: None, CLI_ARG_PRODUCT_BUILD: None,
                        CLI_ARG_PRODUCT_VERSION: None, CLI_ARG_RUN_ENTITY_SPEC: CLI_ARG_VAL_PLAN,
                        CLI_ARG_STORE_RESULT: False}

# expected footprint for detail actions
# [action, entity-type, entity-ref-kind, entity-ref, product-name, entity, version-id, build-id, environment-id]
FP_DA_EXP_ARGS_CASE_MAX = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_CASE, CLI_ENTITY_REF_KIND_NAME, DEFAULT_CASE, DEFAULT_PRODUCT,
                           DEFAULT_CASE_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_EXP_ARGS_CASE_MIN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_CASE, CLI_ENTITY_REF_KIND_NAME, DEFAULT_CASE, DEFAULT_PRODUCT,
                           DEFAULT_CASE_ID, None, None, None]
FP_DA_EXP_ARGS_CASE_ID_MAX = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_CASE, CLI_ENTITY_REF_KIND_ID, DEFAULT_CASE_ID,
                              DEFAULT_PRODUCT, DEFAULT_CASE_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_EXP_ARGS_CASE_ID_MIN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_CASE, CLI_ENTITY_REF_KIND_ID, DEFAULT_CASE_ID,
                              DEFAULT_PRODUCT, DEFAULT_CASE_ID, None, None, None]
FP_DA_EXP_ARGS_PLAN_MAX = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, DEFAULT_PLAN, DEFAULT_PRODUCT,
                           DEFAULT_PLAN_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_EXP_ARGS_PLAN_MIN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, DEFAULT_PLAN, DEFAULT_PRODUCT,
                           DEFAULT_PLAN_ID, None, None, None]
FP_DA_EXP_ARGS_DUP_PROD_PLAN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, FULLY_AMBIGUOUS_PLAN,
                                SV_SB_PRODUCT, FULLY_AMBIGUOUS_PLAN_SV_SB_ID, None, None, None]
FP_DA_EXP_ARGS_DUP_PROD_VER_PLAN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, DUP_PLAN,
                                    DEFAULT_PRODUCT, DUP_PLAN_ID_UNIQUE_VER, DEFAULT_VERSION_ID, None, None]
FP_DA_EXP_ARGS_PLAN_ID_MAX = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, DEFAULT_PLAN_ID,
                              DEFAULT_PRODUCT, DEFAULT_PLAN_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_EXP_ARGS_PLAN_ID_MIN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, DEFAULT_PLAN_ID,
                              DEFAULT_PRODUCT, DEFAULT_PLAN_ID, None, None, None]
FP_DA_EXP_ARGS_PROD_MAX = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PRODUCT, CLI_ENTITY_REF_KIND_NAME, DEFAULT_PRODUCT,
                           DEFAULT_PRODUCT, DEFAULT_PRODUCT_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_EXP_ARGS_PROD_MIN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PRODUCT, CLI_ENTITY_REF_KIND_NAME, DEFAULT_PRODUCT,
                           DEFAULT_PRODUCT, DEFAULT_PRODUCT_ID, None, None, None]
FP_DA_EXP_ARGS_PROD_ID_MAX = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PRODUCT, CLI_ENTITY_REF_KIND_ID, DEFAULT_PRODUCT_ID,
                              DEFAULT_PRODUCT, DEFAULT_PRODUCT_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_EXP_ARGS_PROD_ID_MIN = [CLI_ACTION_EXPORT, CLI_ENTITY_TYPE_PRODUCT, CLI_ENTITY_REF_KIND_ID, DEFAULT_PRODUCT_ID,
                              DEFAULT_PRODUCT, DEFAULT_PRODUCT_ID, None, None, None]
FP_DA_IMP_ARGS_MAX = [CLI_ACTION_IMPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_FILE, DEFAULT_FN, None,
                      FILE_PLAN_ID, None, None, None]
FP_DA_IMP_ARGS_MIN = [CLI_ACTION_IMPORT, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_FILE, DEFAULT_FN, None,
                      FILE_PLAN_ID, None, None, None]
FP_DA_RUN_ARGS_ID_MAX = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, DEFAULT_PLAN_ID, DEFAULT_PRODUCT,
                         DEFAULT_PLAN_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_RUN_ARGS_ID_MIN = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, DEFAULT_PLAN_ID, DEFAULT_PRODUCT,
                         DEFAULT_PLAN_ID, DEFAULT_VERSION_ID, DEFAULT_BUILD_ID, None]
FP_DA_RUN_ARGS_ID_MB = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, SV_MB_PLAN_ID, SV_MB_PRODUCT,
                        SV_MB_PLAN_ID, SV_MB_VERSION_ID, SV_MB_DEFAULT_BUILD_ID, None]
FP_DA_RUN_ARGS_ID_MB_NEW_BUILD = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, SV_MB_PLAN_ID,
                                  SV_MB_PRODUCT, SV_MB_PLAN_ID, SV_MB_VERSION_ID, NEW_BUILD, None]
FP_DA_RUN_ARGS_ID_SB = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_ID, SV_SB_PLAN_ID, SV_SB_PRODUCT,
                        SV_SB_PLAN_ID, UNIQUE_VERSION_ID, UNIQUE_BUILD_ID, None]
FP_DA_RUN_ARGS_FILE_MAX = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_FILE, DEFAULT_FN, FILE_PRODUCT,
                           FILE_PLAN_ID, FILE_VERSION_ID, FILE_BUILD_ID, None]
FP_DA_RUN_ARGS_FILE_MIN = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_FILE, DEFAULT_FN, FILE_PRODUCT,
                           FILE_PLAN_ID, FILE_VERSION_ID, FILE_BUILD_ID, None]
FP_DA_RUN_ARGS_NAME_AMBIGUOUS_PROD = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME,
                                      FULLY_AMBIGUOUS_PLAN, SV_SB_PRODUCT,
                                      FULLY_AMBIGUOUS_PLAN_SV_SB_ID, SV_SB_VERSION_ID, SV_SB_BUILD_ID, None]
FP_DA_RUN_ARGS_NAME_NONEXISTING_BUILD = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, DEFAULT_PLAN,
                                         DEFAULT_PRODUCT, DEFAULT_PLAN_ID, DEFAULT_VERSION_ID, NON_EXISTING_BUILD, None]
FP_DA_RUN_ARGS_NAME_MV_MB = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, MV_MB_PLAN, MV_MB_PRODUCT,
                             MV_MB_PLAN_ID, MV_MB_VERSION_ID, MV_MB_DEFAULT_BUILD_ID, DEFAULT_ENV_ID]
FP_DA_RUN_ARGS_NAME_MV_SB = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, MV_SB_PLAN, MV_SB_PRODUCT,
                             MV_SB_PLAN_ID, MV_SB_VERSION_ID, MV_SB_DEFAULT_BUILD_ID, None]
FP_DA_RUN_ARGS_NAME_SV_MB = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, SV_MB_PLAN, SV_MB_PRODUCT,
                             SV_MB_PLAN_ID, SV_MB_VERSION_ID, SV_MB_DEFAULT_BUILD_ID, None]
FP_DA_RUN_ARGS_NAME_SV_MB_NEW_BUILD = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, SV_MB_PLAN,
                                       SV_MB_PRODUCT, SV_MB_PLAN_ID, SV_MB_VERSION_ID, NEW_BUILD, None]
FP_DA_RUN_ARGS_NAME_SV_SB = [CLI_ACTION_RUN, CLI_ENTITY_TYPE_PLAN, CLI_ENTITY_REF_KIND_NAME, SV_SB_PLAN, SV_SB_PRODUCT,
                             SV_SB_PLAN_ID, SV_SB_VERSION_ID, SV_SB_BUILD_ID, None]
FP_OPT_EXP_ARGS_CASE_MAX = {OPTION_BUILD: DEFAULT_BUILD_ID, OPTION_INCLUDE_ATTACHMENTS: True,
                            OPTION_INCLUDE_ENVIRONMENTS: True, OPTION_INCLUDE_HISTORY: True, OPTION_INCLUDE_RUNS: True,
                            OPTION_VERSION: DEFAULT_VERSION_ID}
FP_OPT_EXP_ARGS_CASE_MIN = {OPTION_BUILD: None, OPTION_INCLUDE_ATTACHMENTS: False, OPTION_INCLUDE_ENVIRONMENTS: False,
                            OPTION_INCLUDE_HISTORY: False, OPTION_INCLUDE_RUNS: False, OPTION_VERSION: None}
FP_OPT_EXP_ARGS_PLAN_MAX = {OPTION_BUILD: DEFAULT_BUILD_ID, OPTION_INCLUDE_ATTACHMENTS: True,
                            OPTION_INCLUDE_ENVIRONMENTS: True, OPTION_INCLUDE_HISTORY: True, OPTION_INCLUDE_RUNS: True,
                            OPTION_PLAN_TREE: True, OPTION_VERSION: DEFAULT_VERSION_ID}
FP_OPT_EXP_ARGS_PLAN_MIN = {OPTION_BUILD: None, OPTION_INCLUDE_ATTACHMENTS: False, OPTION_INCLUDE_ENVIRONMENTS: False,
                            OPTION_INCLUDE_HISTORY: False, OPTION_INCLUDE_RUNS: False, OPTION_PLAN_TREE: False,
                            OPTION_VERSION: None}
FP_OPT_EXP_ARGS_PROD_MAX = {OPTION_BUILD: DEFAULT_BUILD_ID, OPTION_INCLUDE_ATTACHMENTS: True,
                            OPTION_INCLUDE_ENVIRONMENTS: True, OPTION_INCLUDE_HISTORY: True, OPTION_INCLUDE_RUNS: True,
                            OPTION_VERSION: DEFAULT_VERSION_ID}
FP_OPT_EXP_ARGS_PROD_MIN = {OPTION_BUILD: None, OPTION_INCLUDE_ATTACHMENTS: False, OPTION_INCLUDE_ENVIRONMENTS: False,
                            OPTION_INCLUDE_HISTORY: False, OPTION_INCLUDE_RUNS: False, OPTION_VERSION: None}
FP_OPT_IMP_ARGS_MAX = {OPTION_AUTO_CREATE: True, OPTION_DRY_RUN: True, OPTION_INCLUDE_ATTACHMENTS: True,
                       OPTION_INCLUDE_ENVIRONMENTS: True, OPTION_USER_REFERENCES: OPTION_VALUE_USER_REF_REPLACE_ALWAYS}
FP_OPT_IMP_ARGS_MIN = {OPTION_AUTO_CREATE: False, OPTION_DRY_RUN: False, OPTION_INCLUDE_ATTACHMENTS: False,
                       OPTION_INCLUDE_ENVIRONMENTS: False, OPTION_USER_REFERENCES: OPTION_VALUE_USER_REF_REPLACE_NEVER}
FP_OPT_RUN_ARGS_NAME_MAX = {OPTION_DRY_RUN: True, OPTION_ENVIRONMENT: DEFAULT_ENV_ID, OPTION_PLAN_TREE: True,
                            OPTION_BUILD: DEFAULT_BUILD_ID, OPTION_STORE_RESULT: True, OPTION_VERSION: DEFAULT_VERSION_ID}
FP_OPT_RUN_ARGS_ID_SB = {OPTION_DRY_RUN: False, OPTION_ENVIRONMENT: None, OPTION_PLAN_TREE: False,
                         OPTION_BUILD: SV_SB_BUILD_ID, OPTION_STORE_RESULT: False, OPTION_VERSION: SV_SB_VERSION_ID}
FP_OPT_RUN_ARGS_NAME_SV_MB_NEW_BUILD = {OPTION_DRY_RUN: False, OPTION_ENVIRONMENT: None, OPTION_PLAN_TREE: False,
                                        OPTION_BUILD: NEW_BUILD, OPTION_STORE_RESULT: False,
                                        OPTION_VERSION: SV_MB_VERSION_ID}


class TestCommon(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        IMP_ARGS_MIN[-1] = test_file_path(CLI_ENTITY_TYPE_PLAN, IMP_ARGS_MIN[-1])
        IMP_ARGS_MAX[-1] = test_file_path(CLI_ENTITY_TYPE_PLAN, IMP_ARGS_MAX[-1])
        RUN_ARGS_FILE_MAX[-1] = test_file_path(CLI_ENTITY_TYPE_PLAN, RUN_ARGS_FILE_MAX[-1])
        RUN_ARGS_FILE_MIN[-1] = test_file_path(CLI_ENTITY_TYPE_PLAN, RUN_ARGS_FILE_MIN[-1])
        FP_IMP_ARGS_MAX[CLI_ARG_INPUT_FILE] = test_file_path(CLI_ENTITY_TYPE_PLAN, FP_IMP_ARGS_MAX[CLI_ARG_INPUT_FILE])
        FP_IMP_ARGS_MIN[CLI_ARG_INPUT_FILE] = test_file_path(CLI_ENTITY_TYPE_PLAN, FP_IMP_ARGS_MIN[CLI_ARG_INPUT_FILE])
        FP_RUN_ARGS_FILE_MAX[CLI_ARG_ENTITY_REF] = test_file_path(CLI_ENTITY_TYPE_PLAN,
                                                                  FP_RUN_ARGS_FILE_MAX[CLI_ARG_ENTITY_REF])
        FP_RUN_ARGS_FILE_MIN[CLI_ARG_ENTITY_REF] = test_file_path(CLI_ENTITY_TYPE_PLAN,
                                                                  FP_RUN_ARGS_FILE_MIN[CLI_ARG_ENTITY_REF])
        FP_DA_IMP_ARGS_MAX[3] = test_file_path(CLI_ENTITY_TYPE_PLAN, FP_DA_IMP_ARGS_MAX[3])
        FP_DA_IMP_ARGS_MIN[3] = test_file_path(CLI_ENTITY_TYPE_PLAN, FP_DA_IMP_ARGS_MIN[3])
        FP_DA_RUN_ARGS_FILE_MAX[3] = test_file_path(CLI_ENTITY_TYPE_PLAN, FP_DA_RUN_ARGS_FILE_MAX[3])
        FP_DA_RUN_ARGS_FILE_MIN[3] = test_file_path(CLI_ENTITY_TYPE_PLAN, FP_DA_RUN_ARGS_FILE_MAX[3])

    def test_parse_arguments_for_action(self):
        """
        Tests plain argument parsing for all actions.
        """
        # export
        self.check_parsed_arguments(EXP_ARGS_CASE_MIN, CLI_ACTION_EXPORT, FP_EXP_ARGS_CASE_MIN)
        self.check_parsed_arguments(EXP_ARGS_CASE_ID_MIN, CLI_ACTION_EXPORT, FP_EXP_ARGS_CASE_ID_MIN)
        self.check_parsed_arguments(EXP_ARGS_PLAN_MIN, CLI_ACTION_EXPORT, FP_EXP_ARGS_PLAN_MIN)
        self.check_parsed_arguments(EXP_ARGS_PLAN_ID_MIN, CLI_ACTION_EXPORT, FP_EXP_ARGS_PLAN_ID_MIN)
        self.check_parsed_arguments(EXP_ARGS_PROD_MIN, CLI_ACTION_EXPORT, FP_EXP_ARGS_PROD_MIN)
        self.check_parsed_arguments(EXP_ARGS_PROD_ID_MIN, CLI_ACTION_EXPORT, FP_EXP_ARGS_PROD_ID_MIN)
        self.check_parsed_arguments(EXP_ARGS_CASE_MAX, CLI_ACTION_EXPORT, FP_EXP_ARGS_CASE_MAX)
        self.check_parsed_arguments(EXP_ARGS_CASE_ID_MAX, CLI_ACTION_EXPORT, FP_EXP_ARGS_CASE_ID_MAX)
        self.check_parsed_arguments(EXP_ARGS_PLAN_MAX, CLI_ACTION_EXPORT, FP_EXP_ARGS_PLAN_MAX)
        self.check_parsed_arguments(EXP_ARGS_PLAN_ID_MAX, CLI_ACTION_EXPORT, FP_EXP_ARGS_PLAN_ID_MAX)
        self.check_parsed_arguments(EXP_ARGS_PROD_MAX, CLI_ACTION_EXPORT, FP_EXP_ARGS_PROD_MAX)
        self.check_parsed_arguments(EXP_ARGS_PROD_ID_MAX, CLI_ACTION_EXPORT, FP_EXP_ARGS_PROD_ID_MAX)
        self.check_parsed_arguments(EXP_ARGS_NO_ARGS, CLI_ACTION_EXPORT, {}, True)
        self.check_parsed_arguments(EXP_ARGS_INV_ENTITY_SPEC, CLI_ACTION_EXPORT, {}, True)
        self.check_parsed_arguments(EXP_ARGS_INV_OPTION, CLI_ACTION_EXPORT, {}, True)
        self.check_parsed_arguments(EXP_ARGS_NO_ENTITY, CLI_ACTION_EXPORT, {}, True)
        self.check_parsed_arguments(EXP_ARGS_NO_OUTPUT_PATH, CLI_ACTION_EXPORT, {}, True)
        # import
        self.check_parsed_arguments(IMP_ARGS_MIN, CLI_ACTION_IMPORT, FP_IMP_ARGS_MIN)
        self.check_parsed_arguments(IMP_ARGS_MAX, CLI_ACTION_IMPORT, FP_IMP_ARGS_MAX)
        self.check_parsed_arguments(IMP_ARGS_NO_FILE_NAME, CLI_ACTION_IMPORT, {}, True)
        self.check_parsed_arguments(IMP_ARGS_INV_OPTION, CLI_ACTION_IMPORT, {}, True)
        self.check_parsed_arguments(IMP_ARGS_INV_ACU_VALUE, CLI_ACTION_IMPORT, {}, True)
        # run
        self.check_parsed_arguments(RUN_ARGS_FILE_MIN, CLI_ACTION_RUN, FP_RUN_ARGS_FILE_MIN)
        self.check_parsed_arguments(RUN_ARGS_ID_MIN, CLI_ACTION_RUN, FP_RUN_ARGS_ID_MIN)
        self.check_parsed_arguments(RUN_ARGS_NAME_MIN, CLI_ACTION_RUN, FP_RUN_ARGS_NAME_MIN)
        self.check_parsed_arguments(RUN_ARGS_FILE_MAX, CLI_ACTION_RUN, FP_RUN_ARGS_FILE_MAX)
        self.check_parsed_arguments(RUN_ARGS_ID_MAX, CLI_ACTION_RUN, FP_RUN_ARGS_ID_MAX)
        self.check_parsed_arguments(RUN_ARGS_NAME_MAX, CLI_ACTION_RUN, FP_RUN_ARGS_NAME_MAX)
        self.check_parsed_arguments(RUN_ARGS_NO_ARGS, CLI_ACTION_RUN, {}, True)
        self.check_parsed_arguments(RUN_ARGS_INV_ENTITY_SPEC, CLI_ACTION_RUN, {}, True)
        self.check_parsed_arguments(RUN_ARGS_INV_OPTION, CLI_ACTION_RUN, {}, True)
        self.check_parsed_arguments(RUN_ARGS_NO_FILE, CLI_ACTION_RUN, {}, True)
        self.check_parsed_arguments(RUN_ARGS_NO_ID, CLI_ACTION_RUN, {}, True)
        self.check_parsed_arguments(RUN_ARGS_NO_NAME, CLI_ACTION_RUN, {}, True)

    def test_detail_action_for_exp(self):
        """
        Tests detailed argument parsing for action export.
        """
        self.check_detail_action(EXP_ARGS_CASE_MIN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_CASE_MIN)
        self.check_detail_action(EXP_ARGS_CASE_MAX, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_CASE_MAX)
        self.check_detail_action(EXP_ARGS_CASE_ID_MIN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_CASE_ID_MIN)
        self.check_detail_action(EXP_ARGS_CASE_ID_MAX, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_CASE_ID_MAX)
        self.check_detail_action(EXP_ARGS_PLAN_MIN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PLAN_MIN)
        self.check_detail_action(EXP_ARGS_PLAN_MAX, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PLAN_MAX)
        # plan referenced by name, name exists in multiple projects
        self.check_detail_action(EXP_ARGS_DUP_PROD_PLAN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_DUP_PROD_PLAN)
        # plan referenced by name, name exists in multiple projects and versions
        self.check_detail_action(EXP_ARGS_DUP_PROD_VER_PLAN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_DUP_PROD_VER_PLAN)
        self.check_detail_action(EXP_ARGS_PLAN_ID_MIN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PLAN_ID_MIN)
        self.check_detail_action(EXP_ARGS_PLAN_ID_MAX, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PLAN_ID_MAX)
        self.check_detail_action(EXP_ARGS_PROD_MIN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PROD_MIN)
        self.check_detail_action(EXP_ARGS_PROD_MAX, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PROD_MAX)
        self.check_detail_action(EXP_ARGS_PROD_ID_MIN, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PROD_ID_MIN)
        self.check_detail_action(EXP_ARGS_PROD_ID_MAX, CLI_ACTION_EXPORT, FP_DA_EXP_ARGS_PROD_ID_MAX)
        self.check_detail_action(EXP_ARGS_DUP_PLAN_NO_PRODUCT, CLI_ACTION_EXPORT, [], True)
        self.check_detail_action(EXP_ARGS_DUP_PROD_PLAN_NO_VERSION, CLI_ACTION_EXPORT, [], True)
        self.check_detail_action(EXP_ARGS_DUP_VERSION_PLAN, CLI_ACTION_EXPORT, [], True)

    def test_detail_action_for_imp(self):
        """
        Tests detailed argument parsing for action import.
        """
        self.check_detail_action(IMP_ARGS_MIN, CLI_ACTION_IMPORT, FP_DA_IMP_ARGS_MIN)
        self.check_detail_action(IMP_ARGS_MAX, CLI_ACTION_IMPORT, FP_DA_IMP_ARGS_MAX)
        self.check_detail_action(IMP_ARGS_NON_EXISTING_FILE, CLI_ACTION_IMPORT, [], True)

    def test_detail_action_for_run(self):
        """
        Tests detailed argument parsing for action run.
        """
        # --------------------------
        # plan referenced by TCMS ID
        # --------------------------
        # plan in single-build version
        self.check_detail_action(RUN_ARGS_ID_SB, CLI_ACTION_RUN, FP_DA_RUN_ARGS_ID_SB)
        # plan in multi-build version, option --product-build specified
        self.check_detail_action(RUN_ARGS_ID_MB, CLI_ACTION_RUN, FP_DA_RUN_ARGS_ID_MB)
        # plan with single version and multiple builds, non-existing build specified
        self.check_detail_action(RUN_ARGS_ID_MB_NEW_BUILD, CLI_ACTION_RUN, FP_DA_RUN_ARGS_ID_MB_NEW_BUILD)
        # plan in multi-build version, option --product-build missing
        self.check_detail_action(RUN_ARGS_ID_BUILD_MISSING, CLI_ACTION_RUN, [], True)
        # specified plan ID doesn't exist in TCMS
        self.check_detail_action(RUN_ARGS_ID_NON_EXISTING_ID, CLI_ACTION_RUN, [], True)
        # specified product version doesn't exist in TCMS
        self.check_detail_action(RUN_ARGS_ID_NON_EXISTING_VERSION, CLI_ACTION_RUN, [], True)
        # -----------------------
        # plan referenced by name
        # -----------------------
        # plan with multiple versions and builds, full specification
        self.check_detail_action(RUN_ARGS_NAME_MV_MB, CLI_ACTION_RUN, FP_DA_RUN_ARGS_NAME_MV_MB)
        # plan with single version and multiple builds, non-existing build specified
        self.check_detail_action(RUN_ARGS_NAME_SV_MB_NEW_BUILD, CLI_ACTION_RUN, FP_DA_RUN_ARGS_NAME_SV_MB_NEW_BUILD)
        # plan in multiple products
        self.check_detail_action(RUN_ARGS_NAME_AMBIGUOUS_PROD, CLI_ACTION_RUN, FP_DA_RUN_ARGS_NAME_AMBIGUOUS_PROD)
        # plan with single version and build
        self.check_detail_action(RUN_ARGS_NAME_SV_SB, CLI_ACTION_RUN, FP_DA_RUN_ARGS_NAME_SV_SB)
        # plan with single version and multiple builds
        self.check_detail_action(RUN_ARGS_NAME_SV_MB, CLI_ACTION_RUN, FP_DA_RUN_ARGS_NAME_SV_MB)
        # plan with multiple versions and single build
        self.check_detail_action(RUN_ARGS_NAME_MV_SB, CLI_ACTION_RUN, FP_DA_RUN_ARGS_NAME_MV_SB)
        # specified plan name doesn't exist in TCMS
        self.check_detail_action(RUN_ARGS_NAME_NON_EXISTING_NAME, CLI_ACTION_RUN, [], True)
        # specified product version doesn't exist in TCMS
        self.check_detail_action(RUN_ARGS_NAME_NON_EXISTING_VERSION, CLI_ACTION_RUN, [], True)
        # plan in multiple products, without option --product
        self.check_detail_action(RUN_ARGS_NAME_MISSING_PROD, CLI_ACTION_RUN, [], True)
        # plan in multiple versions, without option --product-version
        self.check_detail_action(RUN_ARGS_NAME_MISSING_VERSION, CLI_ACTION_RUN, [], True)
        # plan with single version and multiple builds, without option --product-build
        self.check_detail_action(RUN_ARGS_NAME_MISSING_BUILD, CLI_ACTION_RUN, [], True)
        # ----------------------------
        # plan referenced by file name
        # ----------------------------
        self.check_detail_action(RUN_ARGS_FILE_MIN, CLI_ACTION_RUN, FP_DA_RUN_ARGS_FILE_MIN)
        self.check_detail_action(RUN_ARGS_FILE_MAX, CLI_ACTION_RUN, FP_DA_RUN_ARGS_FILE_MAX)

    def test_options_for(self):
        """
        Tests option parsing for all actions.
        """
        # export
        self.check_options(EXP_ARGS_CASE_MIN, CLI_ACTION_EXPORT, FP_OPT_EXP_ARGS_CASE_MIN)
        self.check_options(EXP_ARGS_CASE_MAX, CLI_ACTION_EXPORT, FP_OPT_EXP_ARGS_CASE_MAX)
        self.check_options(EXP_ARGS_PLAN_MIN, CLI_ACTION_EXPORT, FP_OPT_EXP_ARGS_PLAN_MIN)
        self.check_options(EXP_ARGS_PLAN_MAX, CLI_ACTION_EXPORT, FP_OPT_EXP_ARGS_PLAN_MAX)
        self.check_options(EXP_ARGS_PROD_MIN, CLI_ACTION_EXPORT, FP_OPT_EXP_ARGS_PROD_MIN)
        self.check_options(EXP_ARGS_PROD_MAX, CLI_ACTION_EXPORT, FP_OPT_EXP_ARGS_PROD_MAX)
        # import
        self.check_options(IMP_ARGS_MIN, CLI_ACTION_IMPORT, FP_OPT_IMP_ARGS_MIN)
        self.check_options(IMP_ARGS_MAX, CLI_ACTION_IMPORT, FP_OPT_IMP_ARGS_MAX)
        # run
        self.check_options(RUN_ARGS_ID_SB, CLI_ACTION_RUN, FP_OPT_RUN_ARGS_ID_SB)
        self.check_options(RUN_ARGS_NAME_MAX, CLI_ACTION_RUN, FP_OPT_RUN_ARGS_NAME_MAX)
        self.check_options(RUN_ARGS_NAME_SV_MB_NEW_BUILD, CLI_ACTION_RUN, FP_OPT_RUN_ARGS_NAME_SV_MB_NEW_BUILD)

    def check_parsed_arguments(self, args, action, expected_values, error_expected=False):
        """
        Verifies that arguments are parsed with expected values.
        :param list[str] args: the command line arguments
        :param int action: the CLI action
        :param dict expected_values: the expected argument values
        :param bool error_expected: indicates whether an error is expected or not
        """
        if error_expected:
            try:
                _args = parse_arguments_for_action(args, action)
                self.assertTrue(False, 'SystemExit expected')
            except SystemExit:
                return
        _args = parse_arguments_for_action(args, action)
        _args_dict = vars(_args)
        for _k, _v in expected_values.items():
            _arg_name = _k.replace('-', '_')
            self.assertEqual(_v, _args_dict[_arg_name])

    def check_detail_action(self, args, action, expected_values, error_expected=False):
        """
        Verifies that arguments are parsed with expected values.
        :param list[str] args: the command line arguments
        :param int action: the CLI action
        :param list expected_values: the expected action values
        :param bool error_expected: indicates whether an error is expected or not
        """
        if error_expected:
            try:
                _action = TestCommon.parse_detail_action(args, action)
                self.assertTrue(False, 'IssaiException expected')
            except IssaiException as _e:
                return
        _action = TestCommon.parse_detail_action(args, action)
        _expected_action = TestCommon.expected_detail_action_from(expected_values)
        self.assertEqual(_expected_action.base_action(), _action.base_action())
        self.assertEqual(_expected_action.entity_type(), _action.entity_type())
        self.assertEqual(_expected_action.entity_ref_kind(), _action.entity_ref_kind())
        self.assertEqual(_expected_action.entity_ref(), str(_action.entity_ref()))
        self.assertEqual(_expected_action.product_name(), _action.product_name())
        self.verify_object(_expected_action.entity(), _action.entity())
        self.verify_object(_expected_action.version(), _action.version())
        self.verify_object(_expected_action.build(), _action.build())

    def check_options(self, args, action, expected_values, error_expected=False):
        """
        Verifies that options are parsed with expected values.
        :param list[str] args: the command line arguments
        :param int action: the CLI action
        :param dict expected_values: the expected option values
        :param bool error_expected: indicates whether an error is expected or not
        """
        if error_expected:
            try:
                _options = TestCommon.parse_options(args, action)
                self.assertTrue(False, 'IssaiException expected')
            except IssaiException:
                return
        _options = TestCommon.parse_options(args, action)
        self.assertEqual(expected_values.keys(), _options.keys())
        for _k, _v in _options.items():
            if _k == OPTION_VERSION or _k == OPTION_ENVIRONMENT:
                if _v is None:
                    self.assertIsNone(expected_values[_k])
                else:
                    self.assertEqual(int(expected_values[_k]), _v[ATTR_ID])
                continue
            if _k == OPTION_BUILD:
                if _v is None:
                    self.assertIsNone(expected_values[_k])
                    continue
                if isinstance(_v, dict):
                    self.assertEqual(int(expected_values[_k]), _v[ATTR_ID])
                else:
                    self.assertEqual(expected_values[_k], _v)
                continue
            self.assertEqual(expected_values[_k], _v, f'option {_k}')

    def verify_object(self, expected_id, actual_object):
        """
        Verifies that an actual object has expected ID.
        :param str expected_id: the expected ID
        :param dict actual_object: the actual object
        """
        if expected_id is None:
            self.assertIsNone(actual_object)
            return
        if expected_id.isnumeric():
            _actual_id = actual_object.get(ATTR_ID)
            if _actual_id is None:
                _actual_id = actual_object.get(ATTR_ENTITY_ID)
            self.assertEqual(expected_id, str(_actual_id))
            return
        self.assertEqual(expected_id, actual_object)

    @staticmethod
    def parse_detail_action(args, action):
        """
        Combines calls to CLI functions parse_arguments_for_action and detail_action_for.
        :param list[str] args: the command line arguments
        :param int action: the CLI action
        :returns: detailed action
        :rtype: DetailAction
        """
        _parsed_args = parse_arguments_for_action(args, action)
        if action == CLI_ACTION_RUN:
            return detail_action_for_run(_parsed_args)
        if action == CLI_ACTION_IMPORT:
            return detail_action_for_import(_parsed_args)
        return detail_action_for_export(_parsed_args)

    @staticmethod
    def expected_detail_action_from(values):
        """
        Creates an expected detail action from string arguments.
        :param list values: the command line arguments
        :returns: detailed action
        :rtype: DetailAction
        """
        _action = DetailAction(values[0], values[1], values[2], values[3])
        _action.set_product_name(values[4])
        _action.set_entity(values[5])
        _action.set_version(values[6])
        _action.set_build(values[7])
        _action.set_environment(values[8])
        return _action

    @staticmethod
    def parse_options(args, action):
        """
        Combines calls to CLI functions parse_arguments_for_action, detail_action_for and options_for.
        :param list[str] args: the command line arguments
        :param int action: the CLI action
        :returns: options
        :rtype: dict
        """
        _parsed_args = parse_arguments_for_action(args, action)
        _detail_action = TestCommon.parse_detail_action(args, action)
        return options_for(_parsed_args, _detail_action)


if __name__ == '__main__':
    unittest.main()
